@page "/competition-results"
@using Haczykowefajtlapy.Model
@using Microsoft.EntityFrameworkCore
@inject Haczykowefajtlapy.Data.FishingClubContext DbContext
@rendermode InteractiveServer

<style>
    .table-hover tbody tr:hover { background-color: #f5f5f5; }
    .modal-backdrop-custom {
        position: fixed; top: 0; left: 0; width: 100%; height: 100%;
        background-color: rgba(0, 0, 0, 0.5); z-index: 1040;
    }
</style>

<h3 class="mb-4">Wyniki Zawod√≥w</h3>
<div class="d-flex justify-content-between align-items-center mb-3">
    <button class="btn btn-primary" @onclick="AddResult">
        <i class="bi bi-plus-circle"></i> Dodaj wynik
    </button>
    <input class="form-control me-2" placeholder="Wyszukaj..." @bind="searchTerm" />
</div>

<table class="table table-striped table-hover">
    <thead>
    <tr>
        <th class="sortable" @onclick="@(() => SortBy("member"))">Cz≈Çonek @(RenderSortEmoji("member"))</th>
        <th class="sortable" @onclick="@(() => SortBy("competition"))">Zawody @(RenderSortEmoji("competition"))</th>
        <th class="sortable" @onclick="@(() => SortBy("fishType"))">Gatunek ryby @(RenderSortEmoji("fishType"))</th>
        <th class="sortable" @onclick="@(() => SortBy("weight"))">Waga (kg) @(RenderSortEmoji("weight"))</th>
        <th class="sortable" @onclick="@(() => SortBy("place"))">Miejsce @(RenderSortEmoji("place"))</th>
        <th class="text-center">Akcje</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var result in FilteredResults)
    {
        <tr>
            <td>@result.Member.FirstName @result.Member.LastName</td>
            <td>@result.Competition.Name</td>
            <td>@result.FishType</td>
            <td>@result.Weight.ToString("F2")</td>
            <td>@result.Place</td>
            <td class="text-center">
                <button class="btn btn-sm btn-info me-1" @onclick="() => EditResult(result)">‚úèÔ∏è</button>
                <button class="btn btn-sm btn-danger" @onclick="() => PromptDelete(result)">üóëÔ∏è</button>
            </td>
        </tr>
    }
    </tbody>
</table>

@if (isEditModalVisible)
{
    <div class="modal-backdrop-custom"></div>
    <div class="modal fade show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <EditForm Model="resultToEdit" OnValidSubmit="ConfirmEdit">
                    <DataAnnotationsValidator />
                    <div class="modal-header">
                        <h5 class="modal-title">@(resultToEdit.Id == 0 ? "Dodaj" : "Edytuj") wynik</h5>
                        <button type="button" class="btn-close" @onclick="CancelEdit"></button>
                    </div>
                    <div class="modal-body">
                        <ValidationSummary class="text-danger" />
                        @if (!string.IsNullOrEmpty(validationMessage))
                        {
                            <div class="alert alert-danger">@validationMessage</div>
                        }
                        <div class="mb-3">
                            <label class="form-label">Cz≈Çonek</label>
                            <InputSelect class="form-control" @bind-Value="resultToEdit.MemberId">
                                <option value="">-- wybierz cz≈Çonka --</option>
                                @foreach (var m in members)
                                {
                                    <option value="@m.Id">@m.FirstName @m.LastName</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Zawody</label>
                            <InputSelect class="form-control" @bind-Value="resultToEdit.CompetitionId">
                                <option value="">-- wybierz zawody --</option>
                                @foreach (var c in competitions)
                                {
                                    <option value="@c.Id">@c.Name</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Gatunek ryby</label>
                            <InputText class="form-control" @bind-Value="resultToEdit.FishType" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Waga (kg)</label>
                            <InputNumber class="form-control" @bind-Value="resultToEdit.Weight" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Miejsce</label>
                            <InputNumber class="form-control" @bind-Value="resultToEdit.Place" />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Anuluj</button>
                        <button type="submit" class="btn btn-primary">Zapisz</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@if (isDeleteModalVisible)
{
    <div class="modal-backdrop-custom"></div>
    <div class="modal fade show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Usu≈Ñ wynik</h5>
                    <button type="button" class="btn-close" @onclick="CancelDelete"></button>
                </div>
                <div class="modal-body">
                    <p>Czy na pewno chcesz usunƒÖƒá ten wynik?</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CancelDelete">Anuluj</button>
                    <button class="btn btn-danger" @onclick="ConfirmDelete">Usu≈Ñ</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<CompetitionResult> results = new();
    private List<Member> members = new();
    private List<FishingCompetition> competitions = new();
    private CompetitionResult resultToEdit = new();
    private CompetitionResult? resultToDelete;
    private bool isEditModalVisible = false;
    private bool isDeleteModalVisible = false;
    private string searchTerm = string.Empty;
    private string currentSortColumn = "member";
    private bool isSortAscending = true;
    private string? validationMessage;

    protected override async Task OnInitializedAsync()
    {
        results = await DbContext.CompetitionResults
            .Include(r => r.Member)
            .Include(r => r.Competition)
            .ToListAsync();
        members = await DbContext.Members.ToListAsync();
        competitions = await DbContext.FishingCompetitions.ToListAsync();
    }

    private IEnumerable<CompetitionResult> FilteredResults =>
        (string.IsNullOrWhiteSpace(searchTerm)
            ? results
            : results.Where(r =>
                r.Member.FirstName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
                || r.Member.LastName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
                || r.Competition.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
                || r.FishType.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)))
        .OrderByDynamic(currentSortColumn, isSortAscending);

    private void SortBy(string column)
    {
        if (currentSortColumn == column)
            isSortAscending = !isSortAscending;
        else
        {
            currentSortColumn = column;
            isSortAscending = true;
        }
    }

    private string RenderSortEmoji(string column)
    {
        if (currentSortColumn != column) return "";
        return isSortAscending ? "üîº" : "üîΩ";
    }

    private void AddResult()
    {
        resultToEdit = new CompetitionResult();
        isEditModalVisible = true;
    }

    private void EditResult(CompetitionResult result)
    {
        resultToEdit = new CompetitionResult
        {
            Id = result.Id,
            MemberId = result.MemberId,
            CompetitionId = result.CompetitionId,
            FishType = result.FishType,
            Weight = result.Weight,
            Place = result.Place
        };
        isEditModalVisible = true;
    }

    private void CancelEdit() => isEditModalVisible = false;

    private async Task ConfirmEdit()
    {
        bool isPlaceTaken = await DbContext.CompetitionResults.AnyAsync(r =>
            r.CompetitionId == resultToEdit.CompetitionId &&
            r.Place == resultToEdit.Place &&
            r.Id != resultToEdit.Id);

        if (isPlaceTaken)
        {
            validationMessage = "To miejsce jest ju≈º zajƒôte w tych zawodach.";
            return;
        }

        if (resultToEdit.Id == 0)
        {
            DbContext.CompetitionResults.Add(resultToEdit);
            await DbContext.SaveChangesAsync();

            var newResult = await DbContext.CompetitionResults
                .Include(r => r.Member)
                .Include(r => r.Competition)
                .FirstOrDefaultAsync(r => r.Id == resultToEdit.Id);

            if (newResult != null)
                results.Add(newResult);
        }
        else
        {
            var existing = await DbContext.CompetitionResults.FindAsync(resultToEdit.Id);
            if (existing != null)
            {
                existing.MemberId = resultToEdit.MemberId;
                existing.CompetitionId = resultToEdit.CompetitionId;
                existing.FishType = resultToEdit.FishType;
                existing.Weight = resultToEdit.Weight;
                existing.Place = resultToEdit.Place;
                await DbContext.SaveChangesAsync();

                results = await DbContext.CompetitionResults
                    .Include(r => r.Member)
                    .Include(r => r.Competition)
                    .ToListAsync();
            }
        }

        isEditModalVisible = false;
    }

    private void PromptDelete(CompetitionResult result)
    {
        resultToDelete = result;
        isDeleteModalVisible = true;
    }

    private async Task ConfirmDelete()
    {
        if (resultToDelete != null)
        {
            DbContext.CompetitionResults.Remove(resultToDelete);
            results.Remove(resultToDelete);
            await DbContext.SaveChangesAsync();
        }

        isDeleteModalVisible = false;
    }

    private void CancelDelete() => isDeleteModalVisible = false;
    
    
}

