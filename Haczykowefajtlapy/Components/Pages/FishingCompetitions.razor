@page "/fishing-competitions"
@using Haczykowefajtlapy.Model
@using Microsoft.EntityFrameworkCore
@using QuestPDF.Fluent
@inject Haczykowefajtlapy.Data.FishingClubContext DbContext
@rendermode InteractiveServer

<style>
    .table-hover tbody tr:hover { background-color: #f5f5f5; }
    .modal-backdrop-custom {
        position: fixed; top: 0; left: 0; width: 100%; height: 100%;
        background-color: rgba(0, 0, 0, 0.5); z-index: 1040;
    }
</style>

<h3 class="mb-4">Zawody wƒôdkarskie</h3>
<div class="d-flex justify-content-between align-items-center mb-3">
    <button class="btn btn-primary" @onclick="AddCompetition">
        <i class="bi bi-plus-circle"></i> Dodaj zawody
    </button>
    <input class="form-control me-2" placeholder="Wyszukaj..." @bind="searchTerm" />
</div>

<table class="table table-striped table-hover">
    <thead>
        <tr>
            <th class="sortable" @onclick="@(() => SortBy("name"))">Nazwa @(RenderSortEmoji("name"))</th>
            <th class="sortable" @onclick="@(() => SortBy("date"))">Data @(RenderSortEmoji("date"))</th>
            <th class="sortable" @onclick="@(() => SortBy("location"))">Lokalizacja @(RenderSortEmoji("location"))</th>
            <th class="sortable" @onclick="@(() => SortBy("type"))">Typ @(RenderSortEmoji("type"))</th>
            <th class="text-center">Akcje</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var comp in FilteredCompetitions)
        {
            <tr>
                <td>@comp.Name</td>
                <td>@comp.Date.ToString("yyyy-MM-dd")</td>
                <td>@comp.Location</td>
                <td>@comp.CompetitionType</td>
                <td class="text-center">
                    <button class="btn btn-sm btn-info me-1" @onclick="() => EditCompetition(comp)">‚úèÔ∏è</button>
                    <button class="btn btn-sm btn-danger me-1" @onclick="() => PromptDelete(comp)">üóëÔ∏è</button>
                    <a class="btn btn-sm btn-secondary" href="@($"/api/pdf/{comp.Id}")" target="_blank" download>
                        üìÑ
                    </a>
                </td>
            </tr>
        }
    </tbody>
</table>

@if (isEditModalVisible)
{
    <div class="modal-backdrop-custom"></div>
    <div class="modal fade show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <EditForm EditContext="editContext" OnValidSubmit="ConfirmEdit">
                    <DataAnnotationsValidator />
                    <div class="modal-header">
                        <h5 class="modal-title">@(competitionToEdit.Id == 0 ? "Dodaj" : "Edytuj") zawody</h5>
                        <button type="button" class="btn-close" @onclick="CancelEdit"></button>
                    </div>
                    <div class="modal-body">
                        <ValidationSummary class="text-danger" />

                        <div class="mb-3">
                            <label class="form-label">Nazwa</label>
                            <InputText class="form-control" @bind-Value="competitionToEdit.Name" />
                            <ValidationMessage For="@(() => competitionToEdit.Name)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Data</label>
                            <InputDate class="form-control" @bind-Value="competitionToEdit.Date" />
                            <ValidationMessage For="@(() => competitionToEdit.Date)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Lokalizacja</label>
                            <InputText class="form-control" @bind-Value="competitionToEdit.Location" />
                            <ValidationMessage For="@(() => competitionToEdit.Location)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Typ zawod√≥w</label>
                            <InputText class="form-control" @bind-Value="competitionToEdit.CompetitionType" />
                            <ValidationMessage For="@(() => competitionToEdit.CompetitionType)" />
                        </div>
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Anuluj</button>
                        <button type="submit" class="btn btn-primary">Zapisz</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@if (isDeleteModalVisible)
{
    <div class="modal-backdrop-custom"></div>
    <div class="modal fade show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Usu≈Ñ zawody</h5>
                    <button type="button" class="btn-close" @onclick="CancelDelete"></button>
                </div>
                <div class="modal-body">
                    <p>Czy na pewno chcesz usunƒÖƒá te zawody?</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CancelDelete">Anuluj</button>
                    <button class="btn btn-danger" @onclick="ConfirmDelete">Usu≈Ñ</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<FishingCompetition> competitions = new();
    private string searchTerm = string.Empty;
    private bool isEditModalVisible = false;
    private bool isDeleteModalVisible = false;
    private FishingCompetition? competitionToDelete;
    private FishingCompetition competitionToEdit = new();
    private EditContext? editContext;
    private string currentSortColumn = "date";
    private bool isSortAscending = true;

    protected override async Task OnInitializedAsync()
    {
        competitions = await DbContext.FishingCompetitions.ToListAsync();
    }

    private IEnumerable<FishingCompetition> FilteredCompetitions
    {
        get
        {
            var filtered = competitions.Where(c =>
                string.IsNullOrEmpty(searchTerm) ||
                c.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                c.Location.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                c.CompetitionType.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

            return currentSortColumn switch
            {
                "name" => isSortAscending ? filtered.OrderBy(c => c.Name) : filtered.OrderByDescending(c => c.Name),
                "date" => isSortAscending ? filtered.OrderBy(c => c.Date) : filtered.OrderByDescending(c => c.Date),
                "location" => isSortAscending ? filtered.OrderBy(c => c.Location) : filtered.OrderByDescending(c => c.Location),
                "type" => isSortAscending ? filtered.OrderBy(c => c.CompetitionType) : filtered.OrderByDescending(c => c.CompetitionType),
                _ => filtered
            };
        }
    }

    private string RenderSortEmoji(string column)
    {
        if (currentSortColumn != column) return "";
        return isSortAscending ? "üîº" : "üîΩ";
    }

    private void SortBy(string column)
    {
        if (currentSortColumn == column)
            isSortAscending = !isSortAscending;
        else
        {
            currentSortColumn = column;
            isSortAscending = true;
        }
    }
    public async Task<byte[]> GeneratePdfAsync(FishingCompetition comp)
    {
        var document = new ApplicationDocument(comp);
        using var stream = new MemoryStream();
        document.GeneratePdf(stream);
        return stream.ToArray();
    }

    private void AddCompetition()
    {
        competitionToEdit = new FishingCompetition
        {
            Date = DateTime.SpecifyKind(DateTime.Today, DateTimeKind.Utc)
        };
        editContext = new EditContext(competitionToEdit);
        isEditModalVisible = true;
    }

    private void EditCompetition(FishingCompetition comp)
    {
        competitionToEdit = new FishingCompetition
        {
            Id = comp.Id,
            Name = comp.Name,
            Date = DateTime.SpecifyKind(comp.Date, DateTimeKind.Utc),
            Location = comp.Location,
            CompetitionType = comp.CompetitionType
        };
        editContext = new EditContext(competitionToEdit);
        isEditModalVisible = true;
    }

    private void CancelEdit() => isEditModalVisible = false;

    private async Task ConfirmEdit()
    {
        if (competitionToEdit.Id == 0)
        {
            DbContext.FishingCompetitions.Add(competitionToEdit);
            await DbContext.SaveChangesAsync();
            competitions.Add(competitionToEdit);
        }
        else
        {
            var existing = await DbContext.FishingCompetitions.FindAsync(competitionToEdit.Id);
            if (existing != null)
            {
                existing.Name = competitionToEdit.Name;
                existing.Date = DateTime.SpecifyKind(competitionToEdit.Date, DateTimeKind.Utc);
                existing.Location = competitionToEdit.Location;
                existing.CompetitionType = competitionToEdit.CompetitionType;

                await DbContext.SaveChangesAsync();
                competitions = await DbContext.FishingCompetitions.ToListAsync();
            }
        }

        isEditModalVisible = false;
    }

    private void PromptDelete(FishingCompetition comp)
    {
        competitionToDelete = comp;
        isDeleteModalVisible = true;
    }

    private async Task ConfirmDelete()
    {
        if (competitionToDelete != null)
        {
            DbContext.FishingCompetitions.Remove(competitionToDelete);
            competitions.Remove(competitionToDelete);
            await DbContext.SaveChangesAsync();
        }
        isDeleteModalVisible = false;
    }

    private void CancelDelete() => isDeleteModalVisible = false;
}
